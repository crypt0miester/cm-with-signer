/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';

/**
 * @category Instructions
 * @category UpdateMintSigner
 * @category generated
 */
export type UpdateMintSignerInstructionArgs = {
  mintSigner: beet.COption<web3.PublicKey>;
};
/**
 * @category Instructions
 * @category UpdateMintSigner
 * @category generated
 */
const updateMintSignerStruct = new beet.FixableBeetArgsStruct<
  UpdateMintSignerInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['mintSigner', beet.coption(beetSolana.publicKey)],
  ],
  'UpdateMintSignerInstructionArgs',
);
/**
 * Accounts required by the _updateMintSigner_ instruction
 * @category Instructions
 * @category UpdateMintSigner
 * @category generated
 */
export type UpdateMintSignerInstructionAccounts = {
  candyMachine: web3.PublicKey;
  authority: web3.PublicKey;
  wallet: web3.PublicKey;
};

const updateMintSignerInstructionDiscriminator = [134, 240, 248, 61, 9, 83, 134, 118];

/**
 * Creates a _UpdateMintSigner_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateMintSigner
 * @category generated
 */
export function createUpdateMintSignerInstruction(
  accounts: UpdateMintSignerInstructionAccounts,
  args: UpdateMintSignerInstructionArgs,
) {
  const { candyMachine, authority, wallet } = accounts;

  const [data] = updateMintSignerStruct.serialize({
    instructionDiscriminator: updateMintSignerInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: candyMachine,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: authority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: wallet,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey('Cndy2utXYUAN62pVx82aTNGRSEq2HLfsDxZEKSbLqsHR'),
    keys,
    data,
  });
  return ix;
}
